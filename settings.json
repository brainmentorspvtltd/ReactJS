

  // Controls auto save of dirty files. Accepted values:  'off', 'afterDelay', 'onFocusChange' (editor loses focus), 'onWindowChange' (window loses focus). If set to 'afterDelay', you can configure the delay in 'files.autoSaveDelay'.
  "files.autoSave": "off",

  // Controls the font size in pixels.
  "editor.fontSize": 12,

  // Controls the font family.
  "editor.fontFamily": "Menlo, Monaco, 'Courier New', monospace",

  // The number of spaces a tab is equal to. This setting is overriden based on the file contents when `editor.detectIndentation` is on.
  "editor.tabSize": 4,

  // Controls how the editor should render whitespace characters, possibilities are 'none', 'boundary', and 'all'. The 'boundary' option does not render single spaces between words.
  "editor.renderWhitespace": "none",

  // Controls the cursor style, accepted values are 'block', 'block-outline', 'line', 'line-thin', 'underline' and 'underline-thin'
  "editor.cursorStyle": "line",

  // The modifier to be used to add multiple cursors with the mouse. `ctrlCmd` maps to `Control` on Windows and Linux and to `Command` on OSX. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier.
  "editor.multiCursorModifier": "alt",

  // Insert spaces when pressing Tab. This setting is overriden based on the file contents when `editor.detectIndentation` is on.
  "editor.insertSpaces": true,

  // Controls how lines should wrap. Can be:
  //  - 'off' (disable wrapping),
  //  - 'on' (viewport wrapping),
  //  - 'wordWrapColumn' (wrap at `editor.wordWrapColumn`) or
  //  - 'bounded' (wrap at minimum of viewport and `editor.wordWrapColumn`).
  "editor.wordWrap": "off",

  // Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting.
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true
  },

  // Configure file associations to languages (e.g. "*.extension": "html"). These have precedence over the default associations of the languages installed.
  "files.associations": {}

}
,
{


  // Insert snippets when their prefix matches. Works best when 'quickSuggestions' aren't enabled.
  "editor.tabCompletion": false,

  // Controls the font family.
  "editor.fontFamily": "Menlo, Monaco, 'Courier New', monospace",

  // Controls the font weight.
  "editor.fontWeight": "normal",

  // Controls the font size in pixels.
  "editor.fontSize": 12,

  // Controls the line height. Use 0 to compute the lineHeight from the fontSize.
  "editor.lineHeight": 0,

  // Controls the letter spacing in pixels.
  "editor.letterSpacing": 0,

  // Controls the display of line numbers. Possible values are 'on', 'off', and 'relative'. 'relative' shows the line count from the current cursor position.
  "editor.lineNumbers": "on",

  // Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty
  "editor.rulers": [],

  // Characters that will be used as word separators when doing word related navigations or operations
  "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

  // The number of spaces a tab is equal to. This setting is overriden based on the file contents when `editor.detectIndentation` is on.
  "editor.tabSize": 4,

  // Insert spaces when pressing Tab. This setting is overriden based on the file contents when `editor.detectIndentation` is on.
  "editor.insertSpaces": true,

  // When opening a file, `editor.tabSize` and `editor.insertSpaces` will be detected based on the file contents.
  "editor.detectIndentation": true,

  // Controls if selections have rounded corners
  "editor.roundedSelection": true,

  // Controls if the editor will scroll beyond the last line
  "editor.scrollBeyondLastLine": true,

  // Controls if the editor will scroll using an animation
  "editor.smoothScrolling": false,

  // Controls if the minimap is shown
  "editor.minimap.enabled": true,

  // Controls whether the minimap slider is automatically hidden. Possible values are 'always' and 'mouseover'
  "editor.minimap.showSlider": "mouseover",

  // Render the actual characters on a line (as opposed to color blocks)
  "editor.minimap.renderCharacters": true,

  // Limit the width of the minimap to render at most a certain number of columns
  "editor.minimap.maxColumn": 120,

  // Controls if we seed the search string in Find Widget from editor selection
  "editor.find.seedSearchStringFromSelection": true,

  // Controls if Find in Selection flag is turned on when multiple characters or lines of text are selected in the editor
  "editor.find.autoFindInSelection": false,

  // Controls how lines should wrap. Can be:
  //  - 'off' (disable wrapping),
  //  - 'on' (viewport wrapping),
  //  - 'wordWrapColumn' (wrap at `editor.wordWrapColumn`) or
  //  - 'bounded' (wrap at minimum of viewport and `editor.wordWrapColumn`).
  "editor.wordWrap": "off",

  // Controls the wrapping column of the editor when `editor.wordWrap` is 'wordWrapColumn' or 'bounded'.
  "editor.wordWrapColumn": 80,

  // Controls the indentation of wrapped lines. Can be one of 'none', 'same' or 'indent'.
  "editor.wrappingIndent": "same",

  // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events
  "editor.mouseWheelScrollSensitivity": 1,

  // The modifier to be used to add multiple cursors with the mouse. `ctrlCmd` maps to `Control` on Windows and Linux and to `Command` on OSX. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier.
  "editor.multiCursorModifier": "alt",

  // Controls if suggestions should automatically show up while typing
  "editor.quickSuggestions": {
    "other": true,
    "comments": false,
    "strings": false
  },

  // Controls the delay in ms after which quick suggestions will show up
  "editor.quickSuggestionsDelay": 10,

  // Enables pop-up that shows parameter documentation and type information as you type
  "editor.parameterHints": true,

  // Controls if the editor should automatically close brackets after opening them
  "editor.autoClosingBrackets": true,

  // Controls if the editor should automatically format the line after typing
  "editor.formatOnType": false,

  // Controls if the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
  "editor.formatOnPaste": false,

  // Controls if the editor should automatically adjust the indentation when users type, paste or move lines. Indentation rules of the language must be available.
  "editor.autoIndent": true,

  // Controls if suggestions should automatically show up when typing trigger characters
  "editor.suggestOnTriggerCharacters": true,

  // Controls if suggestions should be accepted on 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions. The value 'smart' means only accept a suggestion with Enter when it makes a textual change
  "editor.acceptSuggestionOnEnter": "on",

  // Controls if suggestions should be accepted on commit characters. For instance in JavaScript the semi-colon (';') can be a commit character that accepts a suggestion and types that character.
  "editor.acceptSuggestionOnCommitCharacter": true,

  // Controls whether snippets are shown with other suggestions and how they are sorted.
  "editor.snippetSuggestions": "inline",

  // Controls whether copying without a selection copies the current line.
  "editor.emptySelectionClipboard": true,

  // Controls whether completions should be computed based on words in the document.
  "editor.wordBasedSuggestions": true,

  // Font size for the suggest widget
  "editor.suggestFontSize": 0,

  // Line height for the suggest widget
  "editor.suggestLineHeight": 0,

  // Controls whether the editor should highlight similar matches to the selection
  "editor.selectionHighlight": true,

  // Controls whether the editor should highlight semantic symbol occurrences
  "editor.occurrencesHighlight": true,

  // Controls the number of decorations that can show up at the same position in the overview ruler
  "editor.overviewRulerLanes": 3,

  // Controls if a border should be drawn around the overview ruler.
  "editor.overviewRulerBorder": true,

  // Control the cursor animation style, possible values are 'blink', 'smooth', 'phase', 'expand' and 'solid'
  "editor.cursorBlinking": "blink",

  // Zoom the font of the editor when using mouse wheel and holding Ctrl
  "editor.mouseWheelZoom": false,

  // Controls the cursor style, accepted values are 'block', 'block-outline', 'line', 'line-thin', 'underline' and 'underline-thin'
  "editor.cursorStyle": "line",

  // Enables font ligatures
  "editor.fontLigatures": false,

  // Controls if the cursor should be hidden in the overview ruler.
  "editor.hideCursorInOverviewRuler": false,

  // Controls how the editor should render whitespace characters, possibilities are 'none', 'boundary', and 'all'. The 'boundary' option does not render single spaces between words.
  "editor.renderWhitespace": "none",

  // Controls whether the editor should render control characters
  "editor.renderControlCharacters": false,

  // Controls whether the editor should render indent guides
  "editor.renderIndentGuides": true,

  // Controls how the editor should render the current line highlight, possibilities are 'none', 'gutter', 'line', and 'all'.
  "editor.renderLineHighlight": "line",

  // Controls if the editor shows code lenses
  "editor.codeLens": true,

  // Controls whether the editor has code folding enabled
  "editor.folding": true,

  // Controls whether the fold controls on the gutter are automatically hidden.
  "editor.showFoldingControls": "mouseover",

  // Highlight matching brackets when one of them is selected.
  "editor.matchBrackets": true,

  // Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
  "editor.glyphMargin": true,

  // Inserting and deleting whitespace follows tab stops
  "editor.useTabStops": true,

  // Remove trailing auto inserted whitespace
  "editor.trimAutoWhitespace": true,

  // Keep peek editors open even when double clicking their content or when hitting Escape.
  "editor.stablePeek": false,

  // Controls if the editor should allow to move selections via drag and drop.
  "editor.dragAndDrop": true,

  // Controls whether the editor should run in a mode where it is optimized for screen readers.
  "editor.accessibilitySupport": "auto",

  // Controls whether the editor should detect links and make them clickable
  "editor.links": true,

  // Controls whether the editor should render the inline color decorators and color picker.
  "editor.colorDecorators": true,

  // Enables the code action lightbulb
  "editor.lightbulb.enabled": true,

  // Controls if the diff editor shows the diff side by side or inline
  "diffEditor.renderSideBySide": true,

  // Controls if the diff editor shows changes in leading or trailing whitespace as diffs
  "diffEditor.ignoreTrimWhitespace": true,

  // Controls if the diff editor shows +/- indicators for added/removed changes
  "diffEditor.renderIndicators": true,

  // Format a file on save. A formatter must be available, the file must not be auto-saved, and editor must not be shutting down.
  "editor.formatOnSave": false,

  // Overrides editor colors and font style from the currently selected color theme.
  "editor.tokenColorCustomizations": {},


  // When enabled, will show the watermark tips when no editor is open.
  "workbench.tips.enabled": true,

  // Controls which editor is shown at startup, if none is restored from the previous session. Select 'none' to start without an editor, 'welcomePage' to open the Welcome page (default), 'newUntitledFile' to open a new untitled file (only opening an empty workspace).
  "workbench.startupEditor": "welcomePage",

  // Controls if opened editors should show in tabs or not.
  "workbench.editor.showTabs": true,

  // Controls the format of the label for an editor. Changing this setting can for example make it easier to understand the location of a file:
  // - short:   'parent'
  // - medium:  'workspace/src/parent'
  // - long:    '/home/user/workspace/src/parent'
  // - default: '.../parent', when another tab shares the same title, or the relative workspace path if tabs are disabled
  "workbench.editor.labelFormat": "default",

  // Controls the position of the editor's tabs close buttons or disables them when set to 'off'.
  "workbench.editor.tabCloseButton": "right",

  // Controls if opened editors should show with an icon or not. This requires an icon theme to be enabled as well.
  "workbench.editor.showIcons": true,

  // Controls if opened editors show as preview. Preview editors are reused until they are kept (e.g. via double click or editing) and show up with an italic font style.
  "workbench.editor.enablePreview": true,

  // Controls if opened editors from Quick Open show as preview. Preview editors are reused until they are kept (e.g. via double click or editing).
  "workbench.editor.enablePreviewFromQuickOpen": true,

  // Controls where editors open. Select 'left' or 'right' to open editors to the left or right of the currently active one. Select 'first' or 'last' to open editors independently from the currently active one.
  "workbench.editor.openPositioning": "right",

  // Controls if an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
  "workbench.editor.revealIfOpen": false,

  // Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
  "workbench.commandPalette.history": 50,

  // Controls if the last typed input to the command palette should be restored when opening it the next time.
  "workbench.commandPalette.preserveInput": false,

  // Controls if Quick Open should close automatically once it loses focus.
  "workbench.quickOpen.closeOnFocusLost": true,

  // Controls if opening settings also opens an editor showing all default settings.
  "workbench.settings.openDefaultSettings": true,

  // Controls the location of the sidebar. It can either show on the left or right of the workbench.
  "workbench.sideBar.location": "left",

  // Controls the location of the panel. It can either show on the bottom or right of the workbench.
  "workbench.panel.location": "bottom",

  // Controls the visibility of the status bar at the bottom of the workbench.
  "workbench.statusBar.visible": true,

  // Controls the visibility of the activity bar in the workbench.
  "workbench.activityBar.visible": true,

  // Controls if editors showing a file should close automatically when the file is deleted or renamed by some other process. Disabling this will keep the editor open as dirty on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.
  "workbench.editor.closeOnFileDelete": true,

  // Controls font aliasing method in the workbench.
  // - default: Sub-pixel font smoothing. On most non-retina displays this will give the sharpest text
  // - antialiased: Smooth the font on the level of the pixel, as opposed to the subpixel. Can make the font appear lighter overall
  // - none: Disables font smoothing. Text will show with jagged sharp edges
  "workbench.fontAliasing": "default",

  // Navigate between open files using three-finger swipe horizontally.
  "workbench.editor.swipeToNavigate": false,

  // Specifies the color theme used in the workbench.
  "workbench.colorTheme": "Default Dark+",

  // Specifies the icon theme used in the workbench or 'null' to not show any file icons.
  "workbench.iconTheme": "vs-seti",

  // Overrides colors from the currently selected color theme.
  "workbench.colorCustomizations": {},


  // Controls if files should open in a new window.
  // - default: files will open in the window with the files' folder open or the last active window unless opened via the dock or from finder (macOS only)
  // - on: files will open in a new window
  // - off: files will open in the window with the files' folder open or the last active window
  // Note that there can still be cases where this setting is ignored (e.g. when using the -new-window or -reuse-window command line option).
  "window.openFilesInNewWindow": "off",

  // Controls if folders should open in a new window or replace the last active window.
  // - default: folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu)
  // - on: folders will open in a new window
  // - off: folders will replace the last active window
  // Note that there can still be cases where this setting is ignored (e.g. when using the -new-window or -reuse-window command line option).
  "window.openFoldersInNewWindow": "default",

  // Controls how windows are being reopened after a restart. Select 'none' to always start with an empty workspace, 'one' to reopen the last window you worked on, 'folders' to reopen all windows that had folders opened or 'all' to reopen all windows of your last session.
  "window.restoreWindows": "one",

  // Controls if a window should restore to full screen mode if it was exited in full screen mode.
  "window.restoreFullscreen": false,

  // Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.
  "window.zoomLevel": 0,

  // Controls the window title based on the active editor. Variables are substituted based on the context:
  // ${activeEditorShort}: the file name (e.g. myFile.txt)
  // ${activeEditorMedium}: the path of the file relative to the workspace folder (e.g. myFolder/myFile.txt)
  // ${activeEditorLong}: the full path of the file (e.g. /Users/Development/myProject/myFolder/myFile.txt)
  // ${folderName}: name of the workspace folder the file is contained in (e.g. myFolder)
  // ${folderPath}: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder)
  // ${rootName}: name of the workspace (e.g. myFolder or myWorkspace)
  // ${rootPath}: file path of the workspace (e.g. /Users/Development/myWorkspace)
  // ${appName}: e.g. VS Code
  // ${dirty}: a dirty indicator if the active editor is dirty
  // ${separator}: a conditional separator (" - ") that only shows when surrounded by variables with values
  "window.title": "${activeEditorShort}${separator}${rootName}",

  // Controls the dimensions of opening a new window when at least one window is already opened. By default, a new window will open in the center of the screen with small dimensions. When set to 'inherit', the window will get the same dimensions as the last window that was active. When set to 'maximized', the window will open maximized and fullscreen if configured to 'fullscreen'. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
  "window.newWindowDimensions": "default",

  // Controls if closing the last editor should also close the window. This setting only applies for windows that do not show folders.
  "window.closeWhenEmpty": false,

  // Adjust the appearance of the window title bar. Changes require a full restart to apply.
  "window.titleBarStyle": "custom",

  // Enables macOS Sierra window tabs. Note that changes require a full restart to apply and that native tabs will disable a custom title bar style if configured.
  "window.nativeTabs": false,


  // Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting.
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true
  },

  // Configure file associations to languages (e.g. "*.extension": "html"). These have precedence over the default associations of the languages installed.
  "files.associations": {},

  // The default character set encoding to use when reading and writing files. This setting can be configured per language too.
  "files.encoding": "utf8",

  // When enabled, will attempt to guess the character set encoding when opening files. This setting can be configured per language too.
  "files.autoGuessEncoding": false,

  // The default end of line character. Use \n for LF and \r\n for CRLF.
  "files.eol": "\n",

  // When enabled, will trim trailing whitespace when saving a file.
  "files.trimTrailingWhitespace": false,

  // When enabled, insert a final new line at the end of the file when saving it.
  "files.insertFinalNewline": false,

  // When enabled, will trim all new lines after the final new line at the end of the file when saving it.
  "files.trimFinalNewlines": false,

  // Controls auto save of dirty files. Accepted values:  'off', 'afterDelay', 'onFocusChange' (editor loses focus), 'onWindowChange' (window loses focus). If set to 'afterDelay', you can configure the delay in 'files.autoSaveDelay'.
  "files.autoSave": "off",

  // Controls the delay in ms after which a dirty file is saved automatically. Only applies when 'files.autoSave' is set to 'afterDelay'
  "files.autoSaveDelay": 1000,

  // Configure glob patterns of file paths to exclude from file watching. Patterns must match on absolute paths (i.e. prefix with ** or the full path to match properly). Changing this setting requires a restart. When you experience Code consuming lots of cpu time on startup, you can exclude large folders to reduce the initial load.
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/**": true
  },

  // Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
  "files.hotExit": "onExit",

  // Use the new experimental file watcher.
  "files.useExperimentalFileWatcher": false,

  // The default language mode that is assigned to new files.
  "files.defaultLanguage": "",


  // Controls if turning on Zen Mode also puts the workbench into full screen mode.
  "zenMode.fullScreen": true,

  // Controls if turning on Zen Mode also hides workbench tabs.
  "zenMode.hideTabs": true,

  // Controls if turning on Zen Mode also hides the status bar at the bottom of the workbench.
  "zenMode.hideStatusBar": true,

  // Controls if turning on Zen Mode also hides the activity bar at the left of the workbench.
  "zenMode.hideActivityBar": true,

  // Controls if a window should restore to zen mode if it was exited in zen mode.
  "zenMode.restore": false,


  // Number of editors shown in the Open Editors pane. Set it to 0 to hide the pane.
  "explorer.openEditors.visible": 9,

  // Controls if the height of the open editors section should adapt dynamically to the number of elements or not.
  "explorer.openEditors.dynamicHeight": true,

  // Controls if the explorer should automatically reveal and select files when opening them.
  "explorer.autoReveal": true,

  // Controls if the explorer should allow to move files and folders via drag and drop.
  "explorer.enableDragAndDrop": true,

  // Controls if the explorer should ask for confirmation to move files and folders via drag and drop.
  "explorer.confirmDragAndDrop": true,

  // Controls if the explorer should ask for confirmation when deleting a file via the trash.
  "explorer.confirmDelete": true,

  // Controls sorting order of files and folders in the explorer. In addition to the default sorting, you can set the order to 'mixed' (files and folders sorted combined), 'type' (by file type), 'modified' (by last modified date) or 'filesFirst' (sort files before folders).
  "explorer.sortOrder": "default",

  // Controls if file decorations should use colors.
  "explorer.decorations.colors": true,

  // Controls if file decorations should use badges.
  "explorer.decorations.badges": true,


  // Configure glob patterns for excluding files and folders in searches. Inherits all glob patterns from the files.exclude setting.
  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true
  },

  // Controls whether to use ripgrep in text and file search
  "search.useRipgrep": true,

  // Controls whether to use .gitignore and .ignore files by default when searching for text in a new workspace.
  "search.useIgnoreFilesByDefault": false,

  // Controls whether to use .gitignore and .ignore files when searching for files.
  "search.useIgnoreFiles": false,

  // Configure to include results from a global symbol search in the file results for Quick Open.
  "search.quickOpen.includeSymbols": false,

  // Controls whether to follow symlinks while searching.
  "search.followSymlinks": true,


  // The proxy setting to use. If not set will be taken from the http_proxy and https_proxy environment variables
  "http.proxy": "",

  // Whether the proxy server certificate should be verified against the list of supplied CAs.
  "http.proxyStrictSSL": true,

  // The value to send as the 'Proxy-Authorization' header for every network request.
  "http.proxyAuthorization": null,


  // Controls the dispatching logic for key presses to use either `keydown.code` (recommended) or `keydown.keyCode`.
  "keyboard.dispatch": "code",


  // Configure whether you receive automatic updates from an update channel. Requires a restart after change.
  "update.channel": "default",


  // Allows setting breakpoint in any file
  "debug.allowBreakpointsEverywhere": false,

  // Automatically open explorer view on the end of a debug session
  "debug.openExplorerOnEnd": false,

  // Show variable values inline in editor while debugging
  "debug.inlineValues": false,

  // Controls if the floating debug action bar should be hidden
  "debug.hideActionBar": false,

  // Controls behavior of the internal debug console.
  "debug.internalConsoleOptions": "openOnFirstSessionStart",

  // Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces
  "launch": {},


  // Enable/disable default HTML formatter
  "html.format.enable": true,

  // Maximum amount of characters per line (0 = disable).
  "html.format.wrapLineLength": 120,

  // List of tags, comma separated, that shouldn't be reformatted. 'null' defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
  "html.format.unformatted": "wbr",

  // List of tags, comma separated, where the content shouldn't be reformatted. 'null' defaults to the 'pre' tag.
  "html.format.contentUnformatted": "pre,code,textarea",

  // Indent <head> and <body> sections.
  "html.format.indentInnerHtml": false,

  // Whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
  "html.format.preserveNewLines": true,

  // Maximum number of line breaks to be preserved in one chunk. Use 'null' for unlimited.
  "html.format.maxPreserveNewLines": null,

  // Format and indent {{#foo}} and {{/foo}}.
  "html.format.indentHandlebars": false,

  // End with a newline.
  "html.format.endWithNewline": false,

  // List of tags, comma separated, that should have an extra newline before them. 'null' defaults to "head, body, /html".
  "html.format.extraLiners": "head, body, /html",

  // Wrap attributes.
  "html.format.wrapAttributes": "auto",

  // Configures if the built-in HTML language support suggests Angular V1 tags and properties.
  "html.suggest.angular1": true,

  // Configures if the built-in HTML language support suggests Ionic tags, properties and values.
  "html.suggest.ionic": true,

  // Configures if the built-in HTML language support suggests HTML5 tags, properties and values.
  "html.suggest.html5": true,

  // Configures if the built-in HTML language support validates embedded scripts.
  "html.validate.scripts": true,

  // Configures if the built-in HTML language support validates embedded styles.
  "html.validate.styles": true,

  // Enable/disable autoclosing of HTML tags.
  "html.autoClosingTags": true,

  // Traces the communication between VS Code and the HTML language server.
  "html.trace.server": "off",


  // Associate schemas to JSON files in the current project
  "json.schemas": [],

  // Enable/disable default JSON formatter (requires restart)
  "json.format.enable": true,

  // Traces the communication between VS Code and the JSON language server.
  "json.trace.server": "off",


  // A list of URLs or local paths to CSS style sheets to use from the markdown preview. Relative paths are interpreted relative to the folder open in the explorer. If there is no open folder, they are interpreted relative to the location of the markdown file. All '\' need to be written as '\\'.
  "markdown.styles": [],

  // Sets how YAML front matter should be rendered in the markdown preview. 'hide' removes the front matter. Otherwise, the front matter is treated as markdown content.
  "markdown.previewFrontMatter": "hide",

  // Sets how line-breaks are rendered in the markdown preview. Setting it to 'true' creates a <br> for every newline.
  "markdown.preview.breaks": false,

  // Enable or disable conversion of URL-like text to links in the markdown preview.
  "markdown.preview.linkify": true,

  // Controls the font family used in the markdown preview.
  "markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', 'HelveticaNeue-Light', 'Ubuntu', 'Droid Sans', sans-serif",

  // Controls the font size in pixels used in the markdown preview.
  "markdown.preview.fontSize": 14,

  // Controls the line height used in the markdown preview. This number is relative to the font size.
  "markdown.preview.lineHeight": 1.6,

  // Scrolls the markdown preview to reveal the currently selected line from the editor.
  "markdown.preview.scrollPreviewWithEditorSelection": true,

  // Mark the current editor selection in the markdown preview.
  "markdown.preview.markEditorSelection": true,

  // When the markdown preview is scrolled, update the view of the editor.
  "markdown.preview.scrollEditorWithPreview": true,

  // Double click in the markdown preview to switch to the editor.
  "markdown.preview.doubleClickToSwitchToEditor": true,

  // Enable debug logging for the markdown extension.
  "markdown.trace": "off",


  // Configures if the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
  "php.suggest.basic": true,

  // Enable/disable built-in PHP validation.
  "php.validate.enable": true,

  // Points to the PHP executable.
  "php.validate.executablePath": null,

  // Whether the linter is run on save or on type.
  "php.validate.run": "onSave",


  // Specifies the folder path containing the tsserver and lib*.d.ts files to use.
  "typescript.tsdk": null,

  // Disables automatic type acquisition. Requires TypeScript >= 2.0.6.
  "typescript.disableAutomaticTypeAcquisition": false,

  // Specifies the path to the NPM executable used for Automatic Type Acquisition. Requires TypeScript >= 2.3.4.
  "typescript.npm": null,

  // Check if NPM is installed for Automatic Type Acquisition.
  "typescript.check.npmIsInstalled": true,

  // Enable/disable references CodeLens in JavaScript files.
  "javascript.referencesCodeLens.enabled": false,

  // Enable/disable references CodeLens in TypeScript files. Requires TypeScript >= 2.0.6.
  "typescript.referencesCodeLens.enabled": false,

  // Enable/disable implementations CodeLens. Requires TypeScript >= 2.2.0.
  "typescript.implementationsCodeLens.enabled": false,

  // Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
  "typescript.tsserver.log": "off",

  // Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.
  "typescript.tsserver.trace": "off",

  // Complete functions with their parameter signature.
  "typescript.useCodeSnippetsOnMethodSuggest": false,

  // Enable/disable TypeScript validation.
  "typescript.validate.enable": true,

  // Enable/disable default TypeScript formatter.
  "typescript.format.enable": true,

  // Defines space handling after a comma delimiter.
  "typescript.format.insertSpaceAfterCommaDelimiter": true,

  // Defines space handling after the constructor keyword. Requires TypeScript >= 2.3.0.
  "typescript.format.insertSpaceAfterConstructor": false,

  //  Defines space handling after a semicolon in a for statement.
  "typescript.format.insertSpaceAfterSemicolonInForStatements": true,

  // Defines space handling after a binary operator.
  "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // Defines space handling after keywords in a control flow statement.
  "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // Defines space handling after function keyword for anonymous functions.
  "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // Defines space handling before function argument parentheses. Requires TypeScript >= 2.1.5.
  "typescript.format.insertSpaceBeforeFunctionParenthesis": false,

  // Defines space handling after opening and before closing non empty parenthesis.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // Defines space handling after opening and before closing non empty brackets.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // Defines space handling after opening and before closing non empty braces. Requires TypeScript >= 2.3.0.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // Defines space handling after opening and before closing template string braces. Requires TypeScript >= 2.0.6.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  // Defines space handling after opening and before closing JSX expression braces. Requires TypeScript >= 2.0.6.
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // Defines space handling after type assertions in TypeScript. Requires TypeScript >= 2.4.
  "typescript.format.insertSpaceAfterTypeAssertion": false,

  // Defines whether an open brace is put onto a new line for functions or not.
  "typescript.format.placeOpenBraceOnNewLineForFunctions": false,

  // Defines whether an open brace is put onto a new line for control blocks or not.
  "typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // Enable/disable JavaScript validation.
  "javascript.validate.enable": true,

  // Enable/disable default JavaScript formatter.
  "javascript.format.enable": true,

  // Defines space handling after a comma delimiter.
  "javascript.format.insertSpaceAfterCommaDelimiter": true,

  // Defines space handling after the constructor keyword. Requires TypeScript >= 2.3.0.
  "javascript.format.insertSpaceAfterConstructor": false,

  //  Defines space handling after a semicolon in a for statement.
  "javascript.format.insertSpaceAfterSemicolonInForStatements": true,

  // Defines space handling after a binary operator.
  "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // Defines space handling after keywords in a control flow statement.
  "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // Defines space handling after function keyword for anonymous functions.
  "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // Defines space handling before function argument parentheses. Requires TypeScript >= 2.1.5.
  "javascript.format.insertSpaceBeforeFunctionParenthesis": false,

  // Defines space handling after opening and before closing non empty parenthesis.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // Defines space handling after opening and before closing non empty brackets.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // Defines space handling after opening and before closing non empty braces. Requires TypeScript >= 2.3.0.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // Defines space handling after opening and before closing template string braces. Requires TypeScript >= 2.0.6.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  // Defines space handling after opening and before closing JSX expression braces. Requires TypeScript >= 2.0.6.
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // Defines whether an open brace is put onto a new line for functions or not.
  "javascript.format.placeOpenBraceOnNewLineForFunctions": false,

  // Defines whether an open brace is put onto a new line for control blocks or not.
  "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // Enable/disable auto JSDoc comments
  "jsDocCompletion.enabled": true,

  // Enable/disable semantic checking of JavaScript files. Existing jsconfig.json or tsconfig.json files override this setting. Requires TypeScript >=2.3.1.
  "javascript.implicitProjectConfig.checkJs": false,

  // Enable/disable 'experimentalDecorators' for JavaScript files that are not part of a project. Existing jsconfig.json or tsconfig.json files override this setting. Requires TypeScript >=2.3.1.
  "javascript.implicitProjectConfig.experimentalDecorators": false,

  // Enable/disable including unique names from the file in JavaScript suggestion lists.
  "javascript.nameSuggestions": true,

  // Controls auto detection of tsc tasks. 'off' disables this feature. 'build' only creates single run compile tasks. 'watch' only creates compile and watch tasks. 'on' creates both build and watch tasks. Default is 'on'.
  "typescript.tsc.autoDetect": "on",

  // Enable/disable quick suggestions when typing out an import path.
  "typescript.quickSuggestionsForPaths": true,

  // Enable/disable auto import suggestions. Requires TypeScript >=2.6.1
  "typescript.autoImportSuggestions.enabled": true,

  // Sets the locale used to report TypeScript errors. Requires TypeScript >= 2.6.0. Default of 'null' uses VS Code's locale for TypeScript errors.
  "typescript.locale": null,


  // Enables or disables all validations
  "css.validate": true,

  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties
  "css.lint.compatibleVendorPrefixes": "ignore",

  // When using a vendor-specific prefix also include the standard property
  "css.lint.vendorPrefix": "warning",

  // Do not use duplicate style definitions
  "css.lint.duplicateProperties": "ignore",

  // Do not use empty rulesets
  "css.lint.emptyRules": "warning",

  // Import statements do not load in parallel
  "css.lint.importStatement": "ignore",

  // Do not use width or height when using padding or border
  "css.lint.boxModel": "ignore",

  // The universal selector (*) is known to be slow
  "css.lint.universalSelector": "ignore",

  // No unit for zero needed
  "css.lint.zeroUnits": "ignore",

  // @font-face rule must define 'src' and 'font-family' properties
  "css.lint.fontFaceProperties": "warning",

  // Hex colors must consist of three or six hex numbers
  "css.lint.hexColorLength": "error",

  // Invalid number of parameters
  "css.lint.argumentsInColorFunction": "error",

  // Unknown property.
  "css.lint.unknownProperties": "warning",

  // IE hacks are only necessary when supporting IE7 and older
  "css.lint.ieHack": "ignore",

  // Unknown vendor specific property.
  "css.lint.unknownVendorSpecificProperties": "ignore",

  // Property is ignored due to the display. E.g. with 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect
  "css.lint.propertyIgnoredDueToDisplay": "warning",

  // Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "css.lint.important": "ignore",

  // Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "css.lint.float": "ignore",

  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "css.lint.idSelector": "ignore",

  // Traces the communication between VS Code and the CSS language server.
  "css.trace.server": "off",


  // Enables or disables all validations
  "less.validate": true,

  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties
  "less.lint.compatibleVendorPrefixes": "ignore",

  // When using a vendor-specific prefix also include the standard property
  "less.lint.vendorPrefix": "warning",

  // Do not use duplicate style definitions
  "less.lint.duplicateProperties": "ignore",

  // Do not use empty rulesets
  "less.lint.emptyRules": "warning",

  // Import statements do not load in parallel
  "less.lint.importStatement": "ignore",

  // Do not use width or height when using padding or border
  "less.lint.boxModel": "ignore",

  // The universal selector (*) is known to be slow
  "less.lint.universalSelector": "ignore",

  // No unit for zero needed
  "less.lint.zeroUnits": "ignore",

  // @font-face rule must define 'src' and 'font-family' properties
  "less.lint.fontFaceProperties": "warning",

  // Hex colors must consist of three or six hex numbers
  "less.lint.hexColorLength": "error",

  // Invalid number of parameters
  "less.lint.argumentsInColorFunction": "error",

  // Unknown property.
  "less.lint.unknownProperties": "warning",

  // IE hacks are only necessary when supporting IE7 and older
  "less.lint.ieHack": "ignore",

  // Unknown vendor specific property.
  "less.lint.unknownVendorSpecificProperties": "ignore",

  // Property is ignored due to the display. E.g. with 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect
  "less.lint.propertyIgnoredDueToDisplay": "warning",

  // Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "less.lint.important": "ignore",

  // Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "less.lint.float": "ignore",

  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "less.lint.idSelector": "ignore",


  // Enables or disables all validations
  "scss.validate": true,

  // When using a vendor-specific prefix make sure to also include all other vendor-specific properties
  "scss.lint.compatibleVendorPrefixes": "ignore",

  // When using a vendor-specific prefix also include the standard property
  "scss.lint.vendorPrefix": "warning",

  // Do not use duplicate style definitions
  "scss.lint.duplicateProperties": "ignore",

  // Do not use empty rulesets
  "scss.lint.emptyRules": "warning",

  // Import statements do not load in parallel
  "scss.lint.importStatement": "ignore",

  // Do not use width or height when using padding or border
  "scss.lint.boxModel": "ignore",

  // The universal selector (*) is known to be slow
  "scss.lint.universalSelector": "ignore",

  // No unit for zero needed
  "scss.lint.zeroUnits": "ignore",

  // @font-face rule must define 'src' and 'font-family' properties
  "scss.lint.fontFaceProperties": "warning",

  // Hex colors must consist of three or six hex numbers
  "scss.lint.hexColorLength": "error",

  // Invalid number of parameters
  "scss.lint.argumentsInColorFunction": "error",

  // Unknown property.
  "scss.lint.unknownProperties": "warning",

  // IE hacks are only necessary when supporting IE7 and older
  "scss.lint.ieHack": "ignore",

  // Unknown vendor specific property.
  "scss.lint.unknownVendorSpecificProperties": "ignore",

  // Property is ignored due to the display. E.g. with 'display: inline', the width, height, margin-top, margin-bottom, and float properties have no effect
  "scss.lint.propertyIgnoredDueToDisplay": "warning",

  // Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
  "scss.lint.important": "ignore",

  // Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
  "scss.lint.float": "ignore",

  // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
  "scss.lint.idSelector": "ignore",


  // Automatically update extensions
  "extensions.autoUpdate": true,

  // Ignore extension recommendations
  "extensions.ignoreRecommendations": false,


  // Customizes what kind of terminal to launch.
  "terminal.explorerKind": "integrated",

  // Customizes which terminal to run on Windows.
  "terminal.external.windowsExec": "undefined\\System32\\cmd.exe",

  // Customizes which terminal application to run on OS X.
  "terminal.external.osxExec": "Terminal.app",

  // Customizes which terminal to run on Linux.
  "terminal.external.linuxExec": "xterm",


  // The path of the shell that the terminal uses on Linux.
  "terminal.integrated.shell.linux": "/bin/bash",

  // The command line arguments to use when on the Linux terminal.
  "terminal.integrated.shellArgs.linux": [],

  // The path of the shell that the terminal uses on OS X.
  "terminal.integrated.shell.osx": "/bin/bash",

  // The command line arguments to use when on the OS X terminal.
  "terminal.integrated.shellArgs.osx": [
    "-l"
  ],

  // The path of the shell that the terminal uses on Windows. When using shells shipped with Windows (cmd, PowerShell or Bash on Ubuntu).
  "terminal.integrated.shell.windows": "cmd.exe",

  // The command line arguments to use when on the Windows terminal.
  "terminal.integrated.shellArgs.windows": [],

  // When set, this will prevent the context menu from appearing when right clicking within the terminal, instead it will copy when there is a selection and paste when there is no selection.
  "terminal.integrated.rightClickCopyPaste": false,

  // Controls the font family of the terminal, this defaults to editor.fontFamily's value.
  "terminal.integrated.fontFamily": "",

  // Controls the font size in pixels of the terminal.
  "terminal.integrated.fontSize": 12,

  // Controls the line height of the terminal, this number is multipled by the terminal font size to get the actual line-height in pixels.
  "terminal.integrated.lineHeight": 1,

  // Whether to enable bold text within the terminal, note that this requires support from the terminal shell.
  "terminal.integrated.enableBold": true,

  // Controls whether the terminal cursor blinks.
  "terminal.integrated.cursorBlinking": false,

  // Controls the style of terminal cursor.
  "terminal.integrated.cursorStyle": "block",

  // Controls the maximum amount of lines the terminal keeps in its buffer.
  "terminal.integrated.scrollback": 1000,

  // Controls whether locale variables are set at startup of the terminal, this defaults to true on OS X, false on other platforms.
  "terminal.integrated.setLocaleVariables": true,

  // An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
  "terminal.integrated.cwd": "",

  // Whether to confirm on exit if there are active terminal sessions.
  "terminal.integrated.confirmOnExit": false,

  // A set of command IDs whose keybindings will not be sent to the shell and instead always be handled by Code. This allows the use of keybindings that would normally be consumed by the shell to act the same as when the terminal is not focused, for example ctrl+p to launch Quick Open.
  "terminal.integrated.commandsToSkipShell": [
    "editor.action.toggleTabFocusMode",
    "workbench.action.debug.continue",
    "workbench.action.debug.pause",
    "workbench.action.debug.restart",
    "workbench.action.debug.run",
    "workbench.action.debug.start",
    "workbench.action.debug.stop",
    "workbench.action.focusActiveEditorGroup",
    "workbench.action.focusFirstEditorGroup",
    "workbench.action.focusSecondEditorGroup",
    "workbench.action.focusThirdEditorGroup",
    "workbench.action.navigateDown",
    "workbench.action.navigateLeft",
    "workbench.action.navigateRight",
    "workbench.action.navigateUp",
    "workbench.action.openNextRecentlyUsedEditorInGroup",
    "workbench.action.openPreviousRecentlyUsedEditorInGroup",
    "workbench.action.quickOpen",
    "workbench.action.quickOpenPreviousEditor",
    "workbench.action.quickOpenView",
    "workbench.action.showCommands",
    "workbench.action.tasks.build",
    "workbench.action.tasks.restartTask",
    "workbench.action.tasks.runTask",
    "workbench.action.tasks.showLog",
    "workbench.action.tasks.showTasks",
    "workbench.action.tasks.terminate",
    "workbench.action.tasks.test",
    "workbench.action.terminal.clear",
    "workbench.action.terminal.copySelection",
    "workbench.action.terminal.deleteWordLeft",
    "workbench.action.terminal.deleteWordRight",
    "workbench.action.terminal.findWidget.history.showNext",
    "workbench.action.terminal.findWidget.history.showPrevious",
    "workbench.action.terminal.focus",
    "workbench.action.terminal.focusAtIndex1",
    "workbench.action.terminal.focusAtIndex2",
    "workbench.action.terminal.focusAtIndex3",
    "workbench.action.terminal.focusAtIndex4",
    "workbench.action.terminal.focusAtIndex5",
    "workbench.action.terminal.focusAtIndex6",
    "workbench.action.terminal.focusAtIndex7",
    "workbench.action.terminal.focusAtIndex8",
    "workbench.action.terminal.focusAtIndex9",
    "workbench.action.terminal.focusFindWidget",
    "workbench.action.terminal.focusNext",
    "workbench.action.terminal.focusPrevious",
    "workbench.action.terminal.hideFindWidget",
    "workbench.action.terminal.kill",
    "workbench.action.terminal.new",
    "workbench.action.terminal.paste",
    "workbench.action.terminal.runActiveFile",
    "workbench.action.terminal.runSelectedText",
    "workbench.action.terminal.scrollDown",
    "workbench.action.terminal.scrollDownPage",
    "workbench.action.terminal.scrollToBottom",
    "workbench.action.terminal.scrollToTop",
    "workbench.action.terminal.scrollUp",
    "workbench.action.terminal.scrollUpPage",
    "workbench.action.terminal.selectAll",
    "workbench.action.terminal.toggleTerminal",
    "workbench.action.togglePanel"
  ],

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on OS X
  "terminal.integrated.env.osx": {},

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux
  "terminal.integrated.env.linux": {},

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows
  "terminal.integrated.env.windows": {},


  // Show Errors & Warnings on files and folder.
  "problems.decorations.enabled": false,

  // Controls if Problems view should automatically reveal files when opening them
  "problems.autoReveal": true,


  // Enable usage data and errors to be sent to Microsoft.
  "telemetry.enableTelemetry": true,

  // Enable crash reports to be sent to Microsoft.
  // This option requires restart to take effect.
  "telemetry.enableCrashReporter": true,


  // Whether git is enabled
  "git.enabled": true,

  // Path to the git executable
  "git.path": null,

  // Whether auto refreshing is enabled
  "git.autorefresh": true,

  // Whether auto fetching is enabled
  "git.autofetch": true,

  // Confirm before synchronizing git repositories
  "git.confirmSync": true,

  // Controls the git badge counter. `all` counts all changes. `tracked` counts only the tracked changes. `off` turns it off.
  "git.countBadge": "all",

  // Controls what type of branches are listed when running `Checkout to...`. `all` shows all refs, `local` shows only the local branchs, `tags` shows only tags and `remote` shows only remote branches.
  "git.checkoutType": "all",

  // Ignores the legacy Git warning
  "git.ignoreLegacyWarning": false,

  // Ignores the warning when there are too many changes in a repository
  "git.ignoreLimitWarning": false,

  // The default location where to clone a git repository
  "git.defaultCloneDirectory": null,

  // Commit all changes when there are no staged changes.
  "git.enableSmartCommit": false,

  // Enables commit signing with GPG.
  "git.enableCommitSigning": false,

  // Controls if Git contributes colors and badges to the explorer and the open editors view.
  "git.decorations.enabled": true,


  // Control whether or not jshint is enabled for JavaScript files.
  "jshint.enable": true,

  // A path to file containing the configuration options for jshint. If the file exists it overrides jshint.options and any .jshintrc file
  "jshint.config": null,

  // The jshint options object to provide args to the jshint command.
  "jshint.options": {},

  // A path to a file containing patterns describing which files and directories should be ignored by jshint. If the file exists it overrides jshint.exclude and any .jshintignore file.
  "jshint.excludePath": null,

  // Matching files and directories are being ignored by jshint. Glob patterns are interpreted relative to the workspace's root folder.
  "jshint.exclude": {},


  // Configure editor settings to be overridden for [git-commit] language.
  "[git-commit]":  {
    "editor.rulers": [
        72
    ]
  },

  // Configure editor settings to be overridden for [go] language.
  "[go]":  {
    "editor.insertSpaces": false
  },

  // Configure editor settings to be overridden for [json] language.
  "[json]":  {
    "editor.quickSuggestions": {
        "strings": true
    }
  },

  // Configure editor settings to be overridden for [makefile] language.
  "[makefile]":  {
    "editor.insertSpaces": false
  },

  // Configure editor settings to be overridden for [markdown] language.
  "[markdown]":  {
    "editor.wordWrap": "on",
    "editor.quickSuggestions": false
  },

  // Configure editor settings to be overridden for [yaml] language.
  "[yaml]":  {
    "editor.insertSpaces": true,
    "editor.tabSize": 2
  },


  // Controls whether eslint is enabled for JavaScript files or not.
  "eslint.enable": true,

  // The package manager you use to install node modules.
  "eslint.packageManager": "npm",

  // Always show the ESlint status bar item.
  "eslint.alwaysShowStatus": false,

  // A path added to NODE_PATH when resolving the eslint module.
  "eslint.nodePath": null,

  // Uses the legacy module resolving.
  "eslint._legacyModuleResolve": false,

  // The eslint options object to provide args normally passed to eslint when executed from a command line (see http://eslint.org/docs/developer-guide/nodejs-api#cliengine).
  "eslint.options": {},

  // Traces the communication between VSCode and the eslint linter service.
  "eslint.trace.server": "off",

  // Run the linter on save (onSave) or on type (onType)
  "eslint.run": "onType",

  // Turns auto fix on save on or off.
  "eslint.autoFixOnSave": false,

  // 
  "eslint.workingDirectories": [],

  // An array of language ids which should be validated by ESLint
  "eslint.validate": [
    "javascript",
    "javascriptreact"
  ],


  // Controls whether auto detection of Jake tasks is on or off. Default is on.
  "jake.autoDetect": "on",


  // Specifies debug mode
  "gitlens.debug": false,

  // Specifies whether or not to enable new experimental features (expect there to be issues)
  "gitlens.insiders": false,

  // Specifies how much (if any) output will be sent to the GitLens output channel
  "gitlens.outputLevel": "silent",

  // Specifies the format of the gutter blame annotations
  // Available tokens
  //  ${id} - commit id
  //  ${author} - commit author
  //  ${message} - commit message
  //  ${ago} - relative commit date (e.g. 1 day ago)
  //  ${date} - formatted commit date (format specified by `gitlens.annotations.file.gutter.dateFormat`)
  //  ${authorAgo} - commit author, relative commit date
  // See https://github.com/eamodio/vscode-gitlens/wiki/Advanced-Formatting for advanced formatting
  "gitlens.annotations.file.gutter.format": "${message|40?} ${ago|14-}",

  // Specifies how to format absolute dates (using the `${date}` token) in gutter blame annotations
  // See https://momentjs.com/docs/#/displaying/format/ for valid formats
  "gitlens.annotations.file.gutter.dateFormat": null,

  // Specifies whether or not to compact (deduplicate) matching adjacent gutter blame annotations
  "gitlens.annotations.file.gutter.compact": true,

  // Specifies whether or not to provide a heatmap indicator in the gutter blame annotations
  "gitlens.annotations.file.gutter.heatmap.enabled": true,

  // Specifies where the heatmap indicators will be shown in the gutter blame annotations
  //  `left` - adds a heatmap indicator on the left edge of the gutter blame annotations
  //  `right` - adds a heatmap indicator on the right edge of the gutter blame annotations
  "gitlens.annotations.file.gutter.heatmap.location": "right",

  // Specifies whether or not to provide a commit details hover annotation over the gutter blame annotations
  "gitlens.annotations.file.gutter.hover.details": true,

  // Specifies whether or not to provide a changes (diff) hover annotation over the gutter blame annotations
  "gitlens.annotations.file.gutter.hover.changes": true,

  // Specifies whether or not to trigger hover annotations over the whole line
  "gitlens.annotations.file.gutter.hover.wholeLine": true,

  // Specifies whether or not gutter blame annotations will be separated by a small gap
  "gitlens.annotations.file.gutter.separateLines": true,

  // Specifies whether or not to provide a commit details hover annotation over each line
  "gitlens.annotations.file.hover.details": true,

  // Specifies whether or not to provide a changes (diff) hover annotation over each line
  "gitlens.annotations.file.hover.changes": true,

  // Specifies whether or not to provide heatmap indicators on the left edge of each line
  "gitlens.annotations.file.hover.heatmap.enabled": true,

  // Specifies whether or not to provide a commit details hover annotation
  "gitlens.annotations.file.recentChanges.hover.details": true,

  // Specifies whether or not to provide a changes (diff) hover annotation
  "gitlens.annotations.file.recentChanges.hover.changes": true,

  // Specifies whether or not to provide a commit details hover annotation for the current line
  "gitlens.annotations.line.hover.details": true,

  // Specifies whether or not to provide a changes (diff) hover annotation for the current line
  "gitlens.annotations.line.hover.changes": true,

  // Specifies the format of the trailing blame annotations
  // Available tokens
  //  ${id} - commit id
  //  ${author} - commit author
  //  ${message} - commit message
  //  ${ago} - relative commit date (e.g. 1 day ago)
  //  ${date} - formatted commit date (format specified by `gitlens.annotations.line.trailing.dateFormat`)
  //  ${authorAgo} - commit author, relative commit date
  // See https://github.com/eamodio/vscode-gitlens/wiki/Advanced-Formatting for advanced formatting
  "gitlens.annotations.line.trailing.format": "${authorAgo} • ${message}",

  // Specifies how to format absolute dates (using the `${date}` token) in trailing blame annotations
  // See https://momentjs.com/docs/#/displaying/format/ for valid formats
  "gitlens.annotations.line.trailing.dateFormat": null,

  // Specifies whether or not to provide a commit details hover annotation over the trailing blame annotations
  "gitlens.annotations.line.trailing.hover.details": true,

  // Specifies whether or not to provide a changes (diff) hover annotation over the trailing blame annotations
  "gitlens.annotations.line.trailing.hover.changes": true,

  // Specifies whether or not to trigger hover annotations over the whole line
  "gitlens.annotations.line.trailing.hover.wholeLine": false,

  // Specifies whether or not to ignore whitespace when comparing revisions during blame operations
  "gitlens.blame.ignoreWhitespace": false,

  // Specifies the type of blame annotations that will be shown for the current file
  //  `gutter` - adds an annotation to the beginning of each line
  //  `hover` - shows annotations when hovering over each line
  "gitlens.blame.file.annotationType": "gutter",

  // Specifies whether or not to highlight lines associated with the current line
  "gitlens.blame.file.lineHighlight.enabled": true,

  // Specifies where the associated line highlights will be shown
  //  `gutter` - adds a gutter glyph
  //  `line` - adds a full-line highlight background color
  //  `overviewRuler` - adds a decoration to the overviewRuler (scroll bar)
  "gitlens.blame.file.lineHighlight.locations": [
    "gutter",
    "line",
    "overviewRuler"
  ],

  // Specifies whether or not to provide a blame annotation for the current line, by default
  // Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current session
  "gitlens.blame.line.enabled": true,

  // Specifies the type of blame annotations that will be shown for the current line
  //  `trailing` - adds an annotation to the end of the current line
  //  `hover` - shows annotations when hovering over the current line
  "gitlens.blame.line.annotationType": "trailing",

  // Specifies where the highlights of the recently changed lines will be shown
  //  `gutter` - adds a gutter glyph
  //  `line` - adds a full-line highlight background color
  //  `overviewRuler` - adds a decoration to the overviewRuler (scroll bar)
  "gitlens.recentChanges.file.lineHighlight.locations": [
    "gutter",
    "line",
    "overviewRuler"
  ],

  // Specifies whether or not to provide any Git code lens, by default
  // Use the `Toggle Git Code Lens` command (`gitlens.toggleCodeLens`) to toggle the Git code lens on and off for the current session
  "gitlens.codeLens.enabled": true,

  // Specifies whether or not to show a `recent change` code lens showing the author and date of the most recent commit for the file or code block
  "gitlens.codeLens.recentChange.enabled": true,

  // Specifies the command to be executed when the `recent change` code lens is clicked
  //  `gitlens.toggleFileBlame` - toggles file blame annotations
  //  `gitlens.diffWithPrevious` - compares the current committed file with the previous commit
  //  `gitlens.showQuickCommitDetails` - shows a commit details quick pick
  //  `gitlens.showQuickCommitFileDetails` - shows a commit file details quick pick
  //  `gitlens.showQuickFileHistory` - shows a file history quick pick
  //  `gitlens.showQuickRepoHistory` - shows a branch history quick pick
  "gitlens.codeLens.recentChange.command": "gitlens.showQuickCommitFileDetails",

  // Specifies whether or not to show an `authors` code lens showing number of authors of the file or code block and the most prominent author (if there is more than one)
  "gitlens.codeLens.authors.enabled": true,

  // Specifies the command to be executed when the `authors` code lens is clicked
  //  `gitlens.toggleFileBlame` - toggles file blame annotations
  //  `gitlens.diffWithPrevious` - compares the current committed file with the previous commit
  //  `gitlens.showQuickCommitDetails` - shows a commit details quick pick
  //  `gitlens.showQuickCommitFileDetails` - shows a commit file details quick pick
  //  `gitlens.showQuickFileHistory` - shows a file history quick pick
  //  `gitlens.showQuickRepoHistory` - shows a branch history quick pick
  "gitlens.codeLens.authors.command": "gitlens.toggleFileBlame",

  // Specifies where Git code lens will be shown in the document
  //  `document` - adds code lens at the top of the document
  //  `containers` - adds code lens at the start of container-like symbols (modules, classes, interfaces, etc)
  //  `blocks` - adds code lens at the start of block-like symbols (functions, methods, etc) lines
  "gitlens.codeLens.locations": [
    "document",
    "containers"
  ],

  // Specifies a set of document symbols where Git code lens will or will not be shown in the document
  // Prefix with `!` to not show Git code lens for the symbol
  // Must be a member of `SymbolKind`
  "gitlens.codeLens.customLocationSymbols": [],

  // Specifies where Git code lens will be shown in the document for the specified languages
  "gitlens.codeLens.perLanguageLocations": [
    {
      "language": "css",
      "locations": [
        "document"
      ]
    },
    {
      "language": "html",
      "locations": [
        "document"
      ]
    },
    {
      "language": "json",
      "locations": [
        "document"
      ]
    },
    {
      "language": "less",
      "locations": [
        "document"
      ]
    },
    {
      "language": "scss",
      "locations": [
        "document"
      ]
    },
    {
      "language": "vue",
      "locations": [
        "document"
      ]
    },
    {
      "language": "stylus",
      "locations": [
        "document"
      ]
    }
  ],

  // Specifies whether or not to show debug information in code lens
  "gitlens.codeLens.debug": false,

  // Specifies how all absolute dates will be formatted by default
  // See https://momentjs.com/docs/#/displaying/format/ for valid formats
  "gitlens.defaultDateFormat": null,

  // Specifies whether or not to automatically refresh the `GitLens` view when the repository or the file system changes
  "gitlens.gitExplorer.autoRefresh": true,

  // Specifies the format of committed changes in the `GitLens` view
  // Available tokens
  //  ${id} - commit id
  //  ${author} - commit author
  //  ${message} - commit message
  //  ${ago} - relative commit date (e.g. 1 day ago)
  //  ${date} - formatted commit date (format specified by `gitlens.statusBar.dateFormat`)
  //  ${authorAgo} - commit author, relative commit date
  // See https://github.com/eamodio/vscode-gitlens/wiki/Advanced-Formatting for advanced formatting
  "gitlens.gitExplorer.commitFormat": "${message}  •  ${authorAgo}   (${id})",

  // Specifies the format of a committed file in the `GitLens` view
  // Available tokens
  //  ${directory} - directory name
  //  ${file} - file name
  //  ${filePath} - formatted file name and path
  //  ${path} - full file path
  "gitlens.gitExplorer.commitFileFormat": "${filePath}",

  // Specifies whether or not to show the `GitLens` view
  "gitlens.gitExplorer.enabled": true,

  // Specifies how the `GitLens` view will display files
  //  `auto` - automatically switches between displaying files as a `tree` or `list` based on the `gitlens.gitExplorer.files.threshold` setting and the number of files at each nesting level
  //  `list` - displays files as a list
  //  `tree` - displays files as a tree
  "gitlens.gitExplorer.files.layout": "auto",

  // Specifies whether or not to compact (flatten) unnecessary file nesting in the `GitLens` view
  // Only applies when displaying files as a `tree` or `auto`
  "gitlens.gitExplorer.files.compact": true,

  // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the `GitLens` view
  // Only applies when displaying files as `auto`
  "gitlens.gitExplorer.files.threshold": 5,

  // Specifies whether or not to include working tree files inside the `Repository Status` node of the `GitLens` view
  "gitlens.gitExplorer.includeWorkingTree": true,

  // Specifies whether or not to show the tracking branch when displaying local branches in the `GitLens` view
  "gitlens.gitExplorer.showTrackingBranch": true,

  // Specifies the format of stashed changes in the `GitLens` view
  // Available tokens
  //  ${id} - commit id
  //  ${author} - commit author
  //  ${message} - commit message
  //  ${ago} - relative commit date (e.g. 1 day ago)
  //  ${date} - formatted commit date (format specified by `gitlens.statusBar.dateFormat`)
  //  ${authorAgo} - commit author, relative commit date
  // See https://github.com/eamodio/vscode-gitlens/wiki/Advanced-Formatting for advanced formatting
  "gitlens.gitExplorer.stashFormat": "${message}",

  // Specifies the format of a stashed file in the `GitLens` view
  // Available tokens
  //  ${directory} - directory name
  //  ${file} - file name
  //  ${filePath} - formatted file name and path
  //  ${path} - full file path
  "gitlens.gitExplorer.stashFileFormat": "${filePath}",

  // Specifies the format of the status of a working or committed file in the `GitLens` view
  // Available tokens
  //  ${directory} - directory name
  //  ${file} - file name
  //  ${filePath} - formatted file name and path
  //  ${path} - full file path
  //  ${working} - optional indicator if the file is uncommitted
  "gitlens.gitExplorer.statusFileFormat": "${working}${filePath}",

  // Specifies the starting view (mode) of the `GitLens` view
  //  `auto` - shows the last selected view, defaults to `repository`
  //  `history` - shows the commit history of the active file
  //  `repository` - shows a repository explorer
  "gitlens.gitExplorer.view": "auto",

  // Specifies user-defined remote (code-hosting) services or custom domains for built-in remote services
  "gitlens.remotes": null,

  // Specifies whether or not to provide blame information on the status bar
  "gitlens.statusBar.enabled": true,

  // Specifies the blame alignment in the status bar
  //  `left` - align to the left
  //  `right` - align to the right
  "gitlens.statusBar.alignment": "right",

  // Specifies the command to be executed when the blame status bar item is clicked
  //  `gitlens.toggleFileBlame` - toggles file blame annotations
  //  `gitlens.diffWithPrevious` - compares the current line commit with the previous
  //  `gitlens.diffWithWorking` - compares the current line commit with the working tree
  //  `gitlens.toggleCodeLens` - toggles Git code lens
  //  `gitlens.showQuickCommitDetails` - shows a commit details quick pick
  //  `gitlens.showQuickCommitFileDetails` - shows a commit file details quick pick
  //  `gitlens.showQuickFileHistory` - shows a file history quick pick
  //  `gitlens.showQuickRepoHistory` - shows a branch history quick pick
  "gitlens.statusBar.command": "gitlens.showQuickCommitDetails",

  // Specifies the format of the status bar blame information
  // Available tokens
  //  ${id} - commit id
  //  ${author} - commit author
  //  ${message} - commit message
  //  ${ago} - relative commit date (e.g. 1 day ago)
  //  ${date} - formatted commit date (format specified by `gitlens.statusBar.dateFormat`)
  //  ${authorAgo} - commit author, relative commit date
  // See https://github.com/eamodio/vscode-gitlens/wiki/Advanced-Formatting for advanced formatting
  "gitlens.statusBar.format": "${authorAgo}",

  // Specifies the date format of absolute dates shown in the blame information on the status bar. See https://momentjs.com/docs/#/displaying/format/ for valid formats
  "gitlens.statusBar.dateFormat": null,

  // Specifies the string to be shown in place of both the `recent change` and `authors` code lens when there are unsaved changes
  "gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": "Unsaved changes (cannot determine recent change or authors)",

  // Specifies the string to be shown in place of the `recent change` code lens when there are unsaved changes
  "gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": "Unsaved changes (cannot determine recent change)",

  // Specifies the string to be shown in place of the `authors` code lens when there are unsaved changes
  "gitlens.strings.codeLens.unsavedChanges.authorsOnly": "Unsaved changes (cannot determine authors)",

  // Specifies whether git output will be cached
  "gitlens.advanced.caching.enabled": true,

  // Specifies the threshold for caching larger documents
  "gitlens.advanced.caching.maxLines": 0,

  // Specifies the git path to use
  "gitlens.advanced.git": null,

  // Specifies the maximum number of QuickPick history entries to show
  "gitlens.advanced.maxQuickHistory": 200,

  // Specifies which commands will be added to which menus
  "gitlens.advanced.menus": {
    "editorContext": {
      "blame": true,
      "copy": true,
      "details": true,
      "fileDiff": true,
      "history": true,
      "lineDiff": true,
      "remote": true
    },
    "editorTitle": {
      "blame": true,
      "fileDiff": false,
      "history": false,
      "remote": false,
      "status": false
    },
    "editorTitleContext": {
      "blame": false,
      "fileDiff": false,
      "history": false,
      "remote": false
    },
    "explorerContext": {
      "fileDiff": true,
      "history": true,
      "remote": true
    }
  },

  // Specifies which messages should be suppressed
  "gitlens.advanced.messages": {
    "suppressCommitHasNoPreviousCommitWarning": false,
    "suppressCommitNotFoundWarning": false,
    "suppressFileNotUnderSourceControlWarning": false,
    "suppressGitVersionWarning": false,
    "suppressLineUncommittedWarning": false,
    "suppressNoRepositoryWarning": false,
    "suppressUpdateNotice": false,
    "suppressWelcomeNotice": false
  },

  // Specifies whether or not to close the QuickPick menu when focus is lost
  "gitlens.advanced.quickPick.closeOnFocusOut": true,

  // Specifies how many folders deep to search for repositories
  "gitlens.advanced.repositorySearchDepth": 1,

  // Specifies whether or not to enable GitLens telemetry (even if enabled still abides by the overall `telemetry.enableTelemetry` setting
  "gitlens.advanced.telemetry.enabled": true,


  // Enable/disable merge conflict block CodeLens within editor
  "merge-conflict.codeLens.enabled": true,

  // Enable/disable merge conflict decorators within editor
  "merge-conflict.decorators.enabled": true,


  // Control whether tslint is enabled for TypeScript files or not.
  "tslint.enable": true,

  // Control whether tslint is enabled for JavaScript files or not.
  "tslint.jsEnable": false,

  // An additional rules directory
  "tslint.rulesDirectory": "",

  // Validate a file when there is only a default tslint configuration is found
  "tslint.validateWithDefaultConfig": false,

  // The path to the rules configuration file
  "tslint.configFile": "",

  // Control if TypeScript definition files should be ignored
  "tslint.ignoreDefinitionFiles": true,

  // Configure glob patterns of file paths to exclude from linting
  "tslint.exclude": "",

  // Run the linter on save (onSave) or on type (onType)
  "tslint.run": "onType",

  // A path added to NODE_PATH when resolving the tslint module.
  "tslint.nodePath": "",

  // Turns auto fix on save on or off, or defines which rules (e.g. `no-var-keyword`) to auto fix on save.
  "tslint.autoFixOnSave": false,

  // Always show rule failures as warnings, independent of the tslint configuration.
  "tslint.alwaysShowRuleFailuresAsWarnings": false,

  // Always show the TSlint status bar item, not only when there are errors or warnings.
  "tslint.alwaysShowStatus": false,

  // Traces the communication between VSCode and the tslint linter service.
  "tslint.trace.server": "off",

  // The package manager to use to locate the tslint module.
  "tslint.packageManager": "npm",


  // Controls whether auto detection of Grunt tasks is on or off. Default is on.
  "grunt.autoDetect": "on",


  // Run npm commands in a terminal, otherwise shows the output in the output panel
  "npm.runInTerminal": true,

  // Look for 'package.json' files in these directories
  "npm.includeDirectories": [],

  // Look for 'package.json' in the root directory of the workspace
  "npm.useRootDirectory": true,

  // npm bin name
  "npm.bin": "npm",

  // Validate installed modules
  "npm.validate.enable": true,


  // Ignore brackets in comments or strings
  "bracketPairColorizer.contextualParsing": true,

  // How long the user should idle for, before the document is colorized. Set to 0 to disable
  "bracketPairColorizer.timeOut": 200,

  // Ensure that an opening brackets color does not match a previous brackets color
  "bracketPairColorizer.forceUniqueOpeningColor": false,

  // Should opening brackets iterate the color cycle even if they are not nested
  "bracketPairColorizer.forceIterationColorCycle": false,

  // Should different brackets share a color group (Consecutive), or use their own color group (Independent)
  "bracketPairColorizer.colorMode": "Consecutive",

  // Define paired characters and their shared color group
  "bracketPairColorizer.consecutivePairColors": [
    "()",
    "[]",
    "{}",
    [
      "Gold",
      "Orchid",
      "LightSkyBlue"
    ],
    "Red"
  ],

  // Define paired characters and their color groups
  "bracketPairColorizer.independentPairColors": [
    [
      "()",
      [
        "Gold",
        "Orchid",
        "LightSkyBlue"
      ],
      "Red"
    ],
    [
      "[]",
      [
        "Gold",
        "Orchid",
        "LightSkyBlue"
      ],
      "Red"
    ],
    [
      "{}",
      [
        "Gold",
        "Orchid",
        "LightSkyBlue"
      ],
      "Red"
    ]
  ],


  // Default to folder of last opened file when searching.
  "search-node-modules.useLastFolder": false,

  // Relative path to node_modules folder.
  "search-node-modules.path": "node_modules",


  // Show the welcome message after first installation.
  "material-icon-theme.showWelcomeMessage": true,

  // Show the update message after each update.
  "material-icon-theme.showUpdateMessage": true,

  // Select an icon pack that enables specific icons.
  "material-icon-theme.activeIconPack": "angular",

  // Set custom file icon associations.
  "material-icon-theme.files.associations": {},

  // Set custom folder icon associations.
  "material-icon-theme.folders.associations": {},

  // Set custom language icon associations.
  "material-icon-theme.languages.associations": {},

  // Set the type for the folder icons.
  "material-icon-theme.folders.theme": "specific",

  // Change the color of the folder icons.
  "material-icon-theme.folders.color": "#90a4ae",

  // Hide explorer arrows before folder.
  "material-icon-theme.hidesExplorerArrows": false,


  // Scans builtin modules as well
  "node-module-intellisense.scanBuiltinModules": true,

  // Scans devDependencies as well
  "node-module-intellisense.scanDevDependencies": true,

  // Scans file modules as well
  "node-module-intellisense.scanFileModules": true,

  // File module extensions
  "node-module-intellisense.fileModuleExtensions": [
    ".js",
    ".jsx",
    ".ts",
    ".d.ts",
    ".tsx",
    ".vue",
    ".json"
  ],

  // Module Paths to scan. Use ${workspaceRoot} for workspace lookup.
  "node-module-intellisense.modulePaths": [],


  // Adds the file extension to a import statements
  "path-intellisense.extensionOnImport": false,

  // Mappings for paths
  "path-intellisense.mappings": {},

  // Show hidden files
  "path-intellisense.showHiddenFiles": false,

  // Automatically adds slash after directory
  "path-intellisense.autoSlashAfterDirectory": false,

  // Sets an absolute path to the current workspace
  "path-intellisense.absolutePathToWorkspace": true,


  // Controls whether auto detection of npm scripts is on or off. Default is on.
  "npm.autoDetect": "on",

  // Run npm commands with the `--silent` option.
  "npm.runSilent": false,

  // The package manager used to run scripts.
  "npm.packageManager": "npm",


  // Run arguments to be passed to 'cordova run/build <platform>' or 'ionic serve' command
  "cordova.runArguments": [],


  // Glob for files to watch and scan, e.g ./src/** ./src/app/**/*.ts. Defaults to **/*.{ts,tsx}
  "autoimport.filesToScan": "**/*.{ts,tsx}",

  // Specifies wether to show notifications from Auto Import
  "autoimport.showNotifications": false,

  // Specifies wether to use double quotes
  "autoimport.doubleQuotes": false,

  // Specifies wether to use spaces between first and last brace
  "autoimport.spaceBetweenBraces": true,

  // Adds found items to intellisense and automatically imports then
  "autoimport.autoComplete": true,

  // Use ; at the end of a line e.g Import * from ./app or Import * from ./app; - Default True
  "autoimport.useSemiColon": true,


  // If set to true, the new version message won't be shown anymore.
  "vsicons.dontShowNewVersionMessage": false,

  // If set to true, when manually changing the configurations, the 'restart' message won't be shown.
  "vsicons.dontShowConfigManuallyChangedMessage": false,

  // If set to true, the extension will restart automatically on project detection.
  "vsicons.projectDetection.autoReload": false,

  // If set to true, the extension will disable the project detection.
  "vsicons.projectDetection.disableDetect": false,

  // If set to true, the extension will match some of the common Angular patterns.
  "vsicons.presets.angular": false,

  // If set to true, the extension will use the official JS icon.
  "vsicons.presets.jsOfficial": false,

  // If set to true, the extension will use the official TS icon.
  "vsicons.presets.tsOfficial": false,

  // If set to true, the extension will use the official JSON icon.
  "vsicons.presets.jsonOfficial": false,

  // If set to true, all folders will be hidden.
  "vsicons.presets.hideFolders": false,

  // If set to true, all folders will have the default folder icon.
  "vsicons.presets.foldersAllDefaultIcon": false,

  // If set to true, the extension will hide the folder arrows in the 'Explorer'.
  "vsicons.presets.hideExplorerArrows": false,

  // The physical path to the parent folder where the custom icons folder resides on your local machine.
  "vsicons.customIconFolderPath": "",

  // These custom associations will override the file icon associations defined by default.
  "vsicons.associations.files": [],

  // These custom associations will override the folder icon associations defined by default.
  "vsicons.associations.folders": [],

  // This setting will let you change the default file icon for dark themes.
  "vsicons.associations.fileDefault.file": null,

  // This setting will let you change the default file icon for light themes.
  "vsicons.associations.fileDefault.file_light": null,

  // This setting will let you change the default folder icon for dark themes.
  "vsicons.associations.folderDefault.folder": null,

  // This setting will let you change the default root folder icon for dark themes.
  "vsicons.associations.folderDefault.root_folder": null,

  // This setting will let you change the default folder icon for light themes.
  "vsicons.associations.folderDefault.folder_light": null,

  // This setting will let you change the default root folder icon for light themes.
  "vsicons.associations.folderDefault.root_folder_light": null,


  // Changes systems default explorer to a specific one. Based on https://github.com/pwnall/node-open
  "view-in-browser.customBrowser": "",


  // Shows expanded Emmet abbreviations as suggestions.
  // The option "inMarkupAndStylesheetFilesOnly" applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
  // The option "always" applies to all parts of the file regardless of markup/css.
  "emmet.showExpandedAbbreviation": "always",

  // Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to "never".
  "emmet.showAbbreviationSuggestions": true,

  // Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and emmet supported language.
  //  Eg: {"vue-html": "html", "javascript": "javascriptreact"}
  "emmet.includeLanguages": {},

  // Variables to be used in Emmet snippets
  "emmet.variables": {},

  // Define profile for specified syntax or use your own profile with specific rules.
  "emmet.syntaxProfiles": {},

  // An array of languages where Emmet abbreviations should not be expanded.
  "emmet.excludeLanguages": [
    "markdown"
  ],

  // Path to a folder containing Emmet profiles and snippets.'
  "emmet.extensionsPath": null,

  // When enabled, Emmet abbreviations are expanded when pressing TAB.
  "emmet.triggerExpansionOnTab": false,

  // Preferences used to modify behavior of some actions and resolvers of Emmet.
  "emmet.preferences": {},

  // If true, then Emmet suggestions will show up as snippets allowing you to order them as per editor.snippetSuggestions setting.
  "emmet.showSuggestionsAsSnippets": false,


  // Controls whether auto detection of Gulp tasks is on or off. Default is on.
  "gulp.autoDetect": "on",


  // Scans devDependencies as well
  "npm-intellisense.scanDevDependencies": false,

  // Look for package.json inside nearest directory instead of workspace root
  "npm-intellisense.recursivePackageJsonLookup": true,

  // (experimental) Enables path intellisense in subfolders of modules
  "npm-intellisense.packageSubfoldersIntellisense": false,

  // shows build in node modules like 'path' of 'fs'
  "npm-intellisense.showBuildInLibs": false,

  // For import command. Use import statements instead of require()
  "npm-intellisense.importES6": true,

  // For import command. The type of quotes to use in the snippet
  "npm-intellisense.importQuotes": "'",

  // For import command. The linebreak used after the snippet
  "npm-intellisense.importLinebreak": ";\r\n",

  // For import command. The declaration type used for require()
  "npm-intellisense.importDeclarationType": "const",


  // List of paths to ignore when using VS Code format command, including format on save. Uses glob pattern matching.
  "beautify.ignore": [],

  // A path to file or object containing the configuration options for js-beautify. If the .jsbeautifyrc file exists in project root, it overrides this configuration.
  "beautify.config": null,

  // Link file types to the beautifier type
  "beautify.language": {
    "js": {
      "type": [
        "javascript",
        "json"
      ],
      "filename": [
        ".jshintrc",
        ".jsbeautify"
      ]
    },
    "css": [
      "css",
      "scss"
    ],
    "html": [
      "htm",
      "html"
    ]
  }

}
,
{

